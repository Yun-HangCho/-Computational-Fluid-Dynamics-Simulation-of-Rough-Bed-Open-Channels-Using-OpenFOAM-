/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  6                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pimpleFoam;

startFrom       latestTime; //startTime;

startTime       0;

stopAt          endTime; //stopAt          writeNow;

endTime         1000.0;

deltaT          0.01;

//The adjustableRunTime option sometimes will limit the maximum courant so it is better to use runTime
writeControl    adjustableRunTime; //writeControl    runTime;

writeInterval   1;

purgeWrite      0;

writeFormat     binary;

writePrecision  8;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.1;

maxDeltaT       0.1;


// ************************************************************************* //

functions
{
#includeFunc Q;
#includeFunc R;
#includeFunc turbulenceIntensity;
#includeFunc Lambda2;
#includeFunc yPlus;
#includeFunc vorticity;
//#includeFunc turbulenceFields;
#includeFunc singleGraphU;
#includeFunc singleGraphP;
#includeFunc singleGraphK;
#includeFunc singleGraphQ;
#includeFunc singleGraphR;
#includeFunc residuals;
#includeFunc probes;

/*
    fieldAverage1
    {
	type fieldAverage;
	libs ("libfieldFunctionObjects.so");
	writeControl writeTime;
	fields
	(
	    U
	    {
                 mean on;
                 prime2Mean on;
                 base time;
	    }

	    k
	    {
                 mean on;
                 prime2Mean off;
                 base time;
	    } 

	    R 
	    {
                 mean on;
                 prime2Mean off;
                 base time;
	    }
	    );
	}
*/

///////////////////////////////////////////////////////////////////////////
minmaxdomain
{
	type fieldMinMax;
	//type banana;

	functionObjectLibs ("libfieldFunctionObjects.so");

	enabled true;

	mode component;

	writeControl timeStep;
	writeInterval 1;

	log true;

	fields (p U k omega);
}
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

forces_object
{
	type forces;
	functionObjectLibs ("libforces.so");

        enabled         false;

	//writeControl outputTime;
	writeControl   timeStep;
	writeInterval  1;

	//// Patches to sample
	//patches ("body1" "body2" "body3");
	patches ("semi_sphere");

	//// Name of fields
	pName p;
	Uname U;

	//// Density
	rho rhoInf;
	rhoInf 1.;

	//// Centre of rotation
	CofR (0 0 0);
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

forceCoeffsCyl
{
	// rhoInf - reference density
	// CofR - Centre of rotation
	// dragDir - Direction of drag coefficient
	// liftDir - Direction of lift coefficient
	// pitchAxis - Pitching moment axis
	// magUinf - free stream velocity magnitude
	// lRef - reference length
	// Aref - reference area
	type forceCoeffs;
	functionObjectLibs ("libforces.so");
	//patches ("body1" "body2" "body3");
	patches ("semi_sphere");

	pName p;
	Uname U;
	rho rhoInf;
	rhoInf 1.0;

	//// Dump to file
	log true;

	CofR (0.0 0 0);
	liftDir (0 0 1);
	dragDir (1 0 0);
	pitchAxis (0 1 0);
	magUInf 1.0;
	lRef 1.0;         // reference enght
	Aref 0.7853981;    // reference area 1 for 2d

        writeControl   timeStep;
        writeInterval  1;
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

    fieldAverage
    {
        type            fieldAverage;
        functionObjectLibs ("libfieldFunctionObjects.so");

        enabled         false;

        writeControl   outputTime;

	//writeControl   timeStep;
	//writeInterval  100;

	//cleanRestart true;

        timeStart       50;
	//timeEnd         200;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }

            p
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }
        );
    }

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
    inMassFlow
    {
        type            surfaceFieldValue;
        functionObjectLibs ("libfieldFunctionObjects.so");

        enabled         true;

	//writeControl     outputTime;
	writeControl   timeStep;
	writeInterval  1;

        log             true;

        writeFields     false;

        regionType          patch;
        name      minx;

	operation       sum;
        fields
        (
            phi
        );
    }
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
    outMassFlow
    {
        type            surfaceFieldValue;
        functionObjectLibs ("libfieldFunctionObjects.so");

        enabled         true;

	//writeControl     outputTime;

	writeControl   timeStep;
	writeInterval  1;

        log             yes;

        writeFields     false;

        //writeFields     true;
        //surfaceFormat   raw;

        regionType          patch;
        name      maxx;

	operation       sum;
        fields
        (
            phi
        );
    }
///////////////////////////////////////////////////////////////////////////

};
